trigger:
  - master

pool:
  vmImage: "windows-latest"

stages:
  - stage: first_stage
    variables:
      - group: dev-variable-group
    jobs:
      - job: Sanity_On_Dev
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                echo "Checking complete"
          
          - template: "./template.yml"
          
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo 'Hello World'
                echo $(lower-limit)
                echo $(upper-limit)

          
          - task: Bash@3
            displayName: First Check within same JOB
            inputs:
              targetType: 'inline'
              script: |
                echo $(PythonScript.myVar) 
  
  - stage: QA_Release
    dependsOn: first_stage
    # condition: and(succeeded(), eq(variables['checker'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - name: checker
        value : $[ stageDependencies.first_stage.FIRST_JOB.outputs['PythonScript.MyVar'] ]
    jobs:
    - deployment: Manual_Approvl
      condition: and(succeeded(), eq(variables['checker'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      displayName: Check Approval
      environment: 'dev'
      strategy:                  
        runOnce:
          deploy:
            steps:
            - bash: echo $(checker)
              name: varCheck

    - job: QA_Release  
        steps:
        - task: Bash@3
          displayName: Next Stage Skip Test
          inputs:
            targetType: 'inline'
            script: |
              echo "Hello World!"
              echo $(Build.SourceBranch)

  - stage: Second_Stage
    condition: and(not(failed()), not(canceled()))
    jobs:
    - job: Next_Stage  
        steps:
        - task: Bash@3
          displayName: Next Stage Skip Test
          inputs:
            targetType: 'inline'
            script: |
              echo "Hello World!"
              echo $(Build.SourceBranch)
      

