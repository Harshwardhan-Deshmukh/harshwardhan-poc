trigger:
  - master

pr: none

pool:
  vmImage: "windows-latest"

parameters:
  - name: upperLimitdev
    displayName: "Quality Gates Dev Upper Limit"
    type: number
    default: 90

  - name: lowerLimitdev
    displayName: "Quality Gates Dev Lower Limit"
    type: number
    default: 80

  - name: upperLimitqa
    displayName: "Quality Gates QA Upper Limit"
    type: number
    default: 90

  - name: lowerLimitqa
    displayName: "Quality Gates QA Lower Limit"
    type: number
    default: 80

  - name: upperLimitqc
    displayName: "Quality Gates QC Upper Limit"
    type: number
    default: 90

  - name: lowerLimitqc
    displayName: "Quality Gates QC Lower Limit"
    type: number
    default: 80

stages:
  - stage: first_stage
    jobs:
      - job: FIRST_JOB
        steps:
          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                # Write your commands here
                echo "Checking complete"

          - template: "./template.yml"

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                echo 'Hello World'
                echo ${{parameters.upperLimitdev}}
                echo ${{parameters.lowerLimitdev}}
                echo ${{parameters.upperLimitqa}}
                echo ${{parameters.lowerLimitqa}}
                echo ${{parameters.upperLimitqc}}
                echo ${{parameters.lowerLimitqc}}

          - task: Bash@3
            displayName: First Check within same JOB
            inputs:
              targetType: "inline"
              script: |
                echo $(PythonScript.myVar)

  - stage: Manual_Approval
    dependsOn: first_stage
    condition: and(eq(variables['checker'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - name: checker
        value: $[ dependencies.first_stage.outputs['FIRST_JOB.PythonScript.MyVar'] ]
    jobs:
      - deployment: A
        displayName: Check Approval
        environment: "dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: echo "Manual Approval done"
                  name: varCheck

  - stage: Second_Stage
    dependsOn: Manual_Approval
    condition: and(not(failed()), not(canceled()))
    variables:
      - name: checker
        value: $[ stageDependencies.first_stage.FIRST_JOB.outputs['PythonScript.MyVar'] ]
    jobs:
      - job: Next_Stage
        steps:
          - task: Bash@3
            displayName: Next Stage Skip Test
            inputs:
              targetType: "inline"
              script: |
                echo "Hello World!"
                echo $(Build.SourceBranch)
